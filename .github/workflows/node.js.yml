name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build --if-present
    
    - name: Check if test script exists and run
      run: |
        if npm run | grep -q "^  test$"; then
          npm test
        else
          echo "No test script found, skipping tests"
        fi
    
    # SCP 액션을 사용하여 파일 전송
    - name: Copy files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        source: ".,!node_modules"
        target: "/home/ubuntu/SIST-Docker"
        rm: true
    
    # Docker Compose 설치 및 실행
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          cd /home/ubuntu/SIST-Docker
          
          # Docker 버전 확인
          docker --version
          
          # Docker Compose 설치 확인 및 설치
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
            sudo apt-get install -y docker-compose
          fi
          
          # docker compose 명령어 테스트
          if docker compose version &> /dev/null; then
            echo "Using 'docker compose' command (no hyphen)"
            docker compose down || echo "docker compose down command failed"
            docker compose up -d --build || echo "docker compose up command failed"
          elif command -v docker-compose &> /dev/null; then
            echo "Using 'docker-compose' command (with hyphen)"
            docker-compose down || echo "docker-compose down command failed"
            docker-compose up -d --build || echo "docker-compose up command failed"
          else
            echo "Installing standalone Docker Compose..."
            DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
            mkdir -p $DOCKER_CONFIG/cli-plugins
            COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
            sudo curl -SL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose version
            docker-compose down || echo "docker-compose down command failed after installation"
            docker-compose up -d --build || echo "docker-compose up command failed after installation"
          fi
          
          # 직접 Docker 명령어로 컨테이너 관리 (Docker Compose가 작동하지 않는 경우)
          if [ $? -ne 0 ]; then
            echo "Docker Compose failed, trying direct Docker commands..."
            
            # 이미지 빌드
            docker build -t sist-docker:latest .
            
            # 기존 컨테이너 중지 및 제거
            docker ps -a | grep sist-docker | awk '{print $1}' | xargs -r docker stop
            docker ps -a | grep sist-docker | awk '{print $1}' | xargs -r docker rm
            
            # 새 컨테이너 실행
            docker run -d --name sist-docker -p 80:80 -p 3000:3000 sist-docker:latest
          fi
