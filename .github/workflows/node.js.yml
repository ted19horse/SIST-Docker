name: Node.js CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build --if-present
    - name: Test
      run: npm test
  
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Build
      run: npm run build --if-present
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.PRIVATE_KEY }}
    
    # 디렉토리 권한 설정을 위한 새 단계 추가
    - name: Prepare target directory
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          # 디렉토리가 없는 경우 생성
          mkdir -p /home/ubuntu/SIST-Docker
          # 소유권과 권한 설정
          sudo chown -R ubuntu:ubuntu /home/ubuntu/SIST-Docker
          sudo chmod -R 755 /home/ubuntu/SIST-Docker
        EOF
    
    - name: Copy files to EC2
      run: |
        scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST }}:/home/ubuntu/SIST-Docker
    
    - name: Deploy to EC2 and run Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST }} << 'EOF'
          cd /home/ubuntu/SIST-Docker
          docker-compose down
          docker-compose up -d --build
        EOF
